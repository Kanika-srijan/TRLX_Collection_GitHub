{
	"info": {
		"_postman_id": "06587916-3f4e-4a91-b538-80dd16def7a6",
		"name": "TRLX  Phase1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sprint 1",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Brand Category Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad63ab4d-eb67-4b1b-888f-404909e4a90f",
										"exec": [
											"",
											"if(responseCode.code === 200)",
											"{",
											"",
											"",
											"",
											"//Storing Common Tests in an Anonymous Function and then assigning that function in a Variable",
											"var commonTests = ()=> ",
											"//code to Verify Response Headers and their values",
											"{",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-Frame-Options\",\"SAMEORIGIN\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"}",
											"",
											"",
											"//code to set Common Tests Variable into a Global Variable after Converting it into a String",
											"pm.globals.set(\"commonTests\",commonTests.toString());",
											"",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"brandKey\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"brandKey\",",
											"            \"title\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"//false -check recursive",
											"//true - ban unknown properties",
											"//true - Overall result to be true",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData,schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//call CommonTests Variable",
											"commonTests();",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++ )",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql('null');",
											"  pm.expect(jsonData.results[i].brandKey).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageSmall).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageMedium).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageLarge).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch brand Key of first result and store it in a environment variable",
											"pm.environment.set(\"brand_id_set\",jsonData.results[0].brandKey);",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/brandCategories?_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"brandCategories"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Primary Navigation Menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e165fec2-5f15-4047-b7fd-a5608147ae70",
										"exec": [
											"",
											"if(responseCode.code === 200)",
											"{",
											"    ",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"primaryNavigationMenu\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"secondaryNavigationMenu\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": [",
											"                    {",
											"                      \"type\": \"object\",",
											"                      \"properties\": {",
											"                        \"sequenceId\": {",
											"                          \"type\": \"integer\"",
											"                        },",
											"                        \"content\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"name\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"URL\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"type\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"attributes\": {",
											"                          \"type\": \"string\"",
											"                        }",
											"                      },",
											"                      \"required\": [",
											"                        \"sequenceId\",",
											"                        \"content\",",
											"                        \"name\",",
											"                        \"URL\",",
											"                        \"type\",",
											"                        \"attributes\"",
											"                      ]",
											"                    },",
											"                    {",
											"                      \"type\": \"object\",",
											"                      \"properties\": {",
											"                        \"sequenceId\": {",
											"                          \"type\": \"integer\"",
											"                        },",
											"                        \"content\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"name\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"URL\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"type\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"attributes\": {",
											"                          \"type\": \"string\"",
											"                        }",
											"                      },",
											"                      \"required\": [",
											"                        \"sequenceId\",",
											"                        \"content\",",
											"                        \"name\",",
											"                        \"URL\",",
											"                        \"type\",",
											"                        \"attributes\"",
											"                      ]",
											"                    },",
											"                    {",
											"                      \"type\": \"object\",",
											"                      \"properties\": {",
											"                        \"sequenceId\": {",
											"                          \"type\": \"integer\"",
											"                        },",
											"                        \"content\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"name\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"URL\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"type\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"attributes\": {",
											"                          \"type\": \"string\"",
											"                        }",
											"                      },",
											"                      \"required\": [",
											"                        \"sequenceId\",",
											"                        \"content\",",
											"                        \"name\",",
											"                        \"URL\",",
											"                        \"type\",",
											"                        \"attributes\"",
											"                      ]",
											"                    }",
											"                  ]",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\",",
											"                \"secondaryNavigationMenu\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"sequenceId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"content\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"URL\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"type\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"attributes\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"sequenceId\",",
											"                \"content\",",
											"                \"name\",",
											"                \"URL\",",
											"                \"type\",",
											"                \"attributes\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"primaryNavigationMenu\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.primaryNavigationMenu[0].sequenceId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[0].content).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[0].name).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[0].type).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[2].secondaryNavigationMenu[0].sequenceId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[2].secondaryNavigationMenu[0].content).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.primaryNavigationMenu[2].secondaryNavigationMenu[0].name).to.not.eql(\"\");",
											"   pm.expect(jsonData.results.primaryNavigationMenu[2].secondaryNavigationMenu[0].type).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=en&_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"primaryNavigationMenu"
									],
									"query": [
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Brand Story Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb336bcd-5a80-426e-af7c-2f875900494c",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema={",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"subTitle\",",
											"        \"imageLarge\",",
											"        \"imageMedium\",",
											"        \"imageSmall\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"body\",",
											"        \"pointValue\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData,schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&brandId={{brand_id_set}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"brandStoryDetails"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "brandId",
											"value": "{{brand_id_set}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Video Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a4d2739-ca23-4182-a875-ddd1569998a0",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"video\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"videoSubtitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"title\",",
											"            \"displayTitle\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\",",
											"            \"video\",",
											"            \"videoSubtitle\",",
											"            \"pointValue\",",
											"            \"body\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].video).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"",
											"",
											"//fetch nid of first result and store it in a Environment Variable",
											"pm.environment.set(\"API_chain_variable\",jsonData.results[0].nid);",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId={{brand_id_set}}&language=en&_format=json&limit=21",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"videoListing"
									],
									"query": [
										{
											"key": "brandId",
											"value": "{{brand_id_set}}"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "limit",
											"value": "21"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Video Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "137ac745-5fc7-4311-86cb-c2850c074e1e",
										"exec": [
											"",
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema={",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoSubtitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"imageLarge\",",
											"        \"imageMedium\",",
											"        \"imageSmall\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"name\",",
											"        \"video\",",
											"        \"videoSubtitle\",",
											"        \"pointValue\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.name).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.video).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid={{API_chain_variable}}&language=en&_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"videoDetails"
									],
									"query": [
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TR Trends Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bae193a-0dfd-42a7-bbd5-3acc27ef3eec",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing external schema in a variable",
											"var schema={",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"title\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\",",
											"            \"pointValue\",",
											"            \"body\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//fetch nid of first result and store it in a Environment Variable",
											"pm.environment.set(\"API_chain_variable\",jsonData.results[0].nid);",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/trendListing?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"trendListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Story Details[TR Trends]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6671eb8-e0f0-41d1-97d2-f7d5a019df4b",
										"exec": [
											"",
											"if(responseCode.code === 200)",
											"{",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing external schema in a variable",
											"var schema={",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"tryThis\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarouselTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarousel\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"subTitle\",",
											"        \"displayTitle\",",
											"        \"imageLarge\",",
											"        \"imageMedium\",",
											"        \"imageSmall\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"body\",",
											"        \"tryThis\",",
											"        \"pointValue\",",
											"        \"commentTitle\",",
											"        \"productCarouselTitle\",",
											"        \"videoImageLarge\",",
											"        \"videoImageMedium\",",
											"        \"videoImageSmall\",",
											"        \"productCarousel\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?_format=json&language=en&nid={{API_chain_variable}}&section=trend",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"storyDetails"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "section",
											"value": "trend"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Factsheet Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b54beac-e34c-4faa-8806-08d0435e12ce",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"   \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"title\",",
											"            \"displayTitle\",",
											"            \"body\",",
											"            \"subTitle\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//fetch nid of first result and store it in a Environment Variable",
											"pm.environment.set(\"API_chain_variable\",jsonData.results[0].nid);",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en&brandId={{brand_id_set}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"factsheetListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "brandId",
											"value": "{{brand_id_set}}"
										},
										{
											"key": "offset",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67621665-2d66-4b9c-a216-7370d2106694",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"productCarouselTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarousel\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"subTitle\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageSmall\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageMedium\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageLarge\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"title\",",
											"                \"subTitle\",",
											"                \"imageSmall\",",
											"                \"imageMedium\",",
											"                \"imageLarge\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"subTitle\",",
											"        \"imageLarge\",",
											"        \"imageMedium\",",
											"        \"imageSmall\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"body\",",
											"        \"pointValue\",",
											"        \"productCarouselTitle\",",
											"        \"videoImageLarge\",",
											"        \"videoImageMedium\",",
											"        \"videoImageSmall\",",
											"        \"productCarousel\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en&nid={{API_chain_variable}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"productDetails"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Like/Bookmark",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cea5b1a-c40c-4897-aaf6-24f0299b0060",
										"exec": [
											"if(responseCode.code === 201)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"likes\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"bookmarks\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"likes\",",
											"        \"bookmarks\",",
											"        \"status\",",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.likes).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.bookmarks).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.status).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.message).to.not.eql(\"\");",
											"});",
											"",
											"",
											"//code to verify value of message",
											" pm.test(\"Verify message value\",function(){",
											" pm.expect(jsonData.results.message).to.eql(\"Flag successfully updated\");",
											" });",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nid\": \"{{nid_like_bookmark_set}}\",\n  \"flag\": {{flag}},\n  \"status\": \"1\"\n}"
								},
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/flag?_format=json",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"flag"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35057a59-ef5a-46c8-ad5f-bc9274a376b8",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"likes\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"bookmarks\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"userLikeStatus\": {",
											"              \"type\": \"boolean\"",
											"            },",
											"            \"userBookmarkStatus\": {",
											"              \"type\": \"boolean\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"likes\",",
											"            \"bookmarks\",",
											"            \"userLikeStatus\",",
											"            \"userBookmarkStatus\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.likes).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.bookmarks).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.userLikeStatus).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.userBookmarkStatus).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/userActivities?_format=json&nid[]={{nid_like_bookmark_set}}",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"userActivities"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "nid[]",
											"value": "{{nid_like_bookmark_set}}"
										},
										{
											"key": "nid[]",
											"value": "284",
											"disabled": true
										},
										{
											"key": "nid[]",
											"value": "149",
											"disabled": true
										},
										{
											"key": "nid[]",
											"value": "10000002",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FAQ Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fe4925d-efc3-4b1a-a339-21f23b9e2139",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"question\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"answer\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"question\",",
											"            \"answer\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    },",
											"    \"faqId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"pointValue\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\",",
											"    \"faqId\",",
											"    \"pointValue\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to fetch value of faqId and Point value",
											" var faqId= jsonData.faqId;",
											" var pointVal=jsonData.pointValue;",
											" ",
											" ",
											"//code to compare value of faqId and Point Value",
											" pm.test(\"Verify Point Value\", function () {",
											"    pm.expect(pointVal).to.eql(50);",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].question).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].answer).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "brandId",
										"type": "text",
										"value": "02",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=json&language=en&brandId={{brand_id_set}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"faqListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "brandId",
											"value": "{{brand_id_set}}"
										},
										{
											"key": "limit",
											"value": "12",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Brand Category Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandCategoriessssss?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandCategoriessssss"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://test/api/v1/brandCategories?_format=json",
											"protocol": "https",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"brandCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandCategories?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandCategories?_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandCategories?",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandCategories?_formattttt=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandCategories"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Primary Navigation Menu",
							"item": [
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?_format=json&Language",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "Language",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank format param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=en&_format",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenuuuuuuu?language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenuuuuuuu"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=zh-hans",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/atom+xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "asa",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=@*%26$&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "@*%26$"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?languageeee=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "languageeee",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=zh-hans&_formattttt=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_formattttt",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format Parm",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/primaryNavigationMenu?language=en&_format=html",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"primaryNavigationMenu"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "html"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Brand Story Detail",
							"item": [
								{
									"name": "Blank Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=&language=en&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?language=en&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid QueryString_Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_formattttt=json&language=en&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&languageeee=en&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageeee",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=zh-hansssss&nid=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hansssss"
												},
												{
													"key": "nid",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&nid=&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": ""
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&niddddd=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "niddddd",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&nid=33@$&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "33@$"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank BrandID Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=zh-hans&nid=33&brandId=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "nid",
													"value": "33"
												},
												{
													"key": "brandId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Brand ID Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=zh-hans&nid=33",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "nid",
													"value": "33"
												},
												{
													"key": "brandId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Brand ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=zh-hans&nid=33&brandIdddd=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "nid",
													"value": "33"
												},
												{
													"key": "brandIdddd",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Brand ID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUxIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjYwMCIsIjIzMDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwibG9jYXRpb24iOlsiMSIsIjIiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WzEyXX0.10Xv0r3rbUKGvNPOpAj1foFwpK9lfE-klPH8_GO6RSc",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&nid=33&brandId=99999",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "33"
												},
												{
													"key": "brandId",
													"value": "99999"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Video Listing",
							"item": [
								{
									"name": "Blank brandId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=&language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": ""
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without BrandId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InvalidQueryString_BrandId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandIddddd=1234&language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandIddddd",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid BrandId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=aaaaa&language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "aaaaa"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=!@%&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "!@%"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&languageeeeee=zh-hans&_format=json&limit=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "languageeeeee",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank brandId_BlankLanguage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234",
													"disabled": true
												},
												{
													"key": "language",
													"value": "zh-hans",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=zh-hans&_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format_Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=zh-hans",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank brandID_lang_format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=&language=&_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": ""
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Limit",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=zh-hans&_format=json&limit=abcd",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "abcd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Offset",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=-1234&language=zh-hans&_format=json&limit=12&offset=1@",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "-1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12"
												},
												{
													"key": "offset",
													"value": "1@"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListinggggg?brandId=1234&language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListinggggg"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoListing?brandId=1234&language=zh-hans&_format=json&limit=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/videoListing?brandId=1234&language=zh-hans&_format=json",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"videoListing"
											],
											"query": [
												{
													"key": "brandId",
													"value": "1234"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "12",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Video Detail",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetailsssss?nid=18&language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetailsssss"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/videoDetails?nid=18&language=en&_format=json",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=&language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18!@$%^&language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18!@$%^"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?niddd=18&language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "niddd",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&language=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&language=en &_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en "
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid_Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&language=en&_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/videoDetails?nid=18&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"videoDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "18"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "TR Trends Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListinggggg?_format=json&language=zh-hans",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListinggggg"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=json&language=zh-hans",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/trendListing?_format=json&language=zh-hans",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=&language=zh-hans",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?language=zh-hans",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?language=zh-hans&_formattt=json",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_formattt",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=json&language=",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=json",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=json&languageeeee=zh-hans",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageeeee",
													"value": "zh-hans"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?_format=json&language=en1234",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format_BlankLanguage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{localhostname}}/api/v1/trendListing?",
											"host": [
												"{{localhostname}}"
											],
											"path": [
												"api",
												"v1",
												"trendListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "zh-hans",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Factsheet Listing",
							"item": [
								{
									"name": "Blank Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=&language=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?language=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_formattttt=json&language=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "",
													"disabled": true
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Lang",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&languageeeee=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageeeee",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en  &brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en  "
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank BrandID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en&brandId=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Brand ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Brand ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en&brandIdddd=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandIdddd",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Brand ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en&brandId=-1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "-1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format_Lang_BrandID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "brandId",
													"value": "1234",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format_Lang",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListingggg?_format=json&language=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListingggg"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/factsheetListing?_format=json&language=en&brandId=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/factsheetListing?_format=json&language=en&brandId=1234",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"factsheetListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Set Like/Fav",
							"item": [
								{
									"name": "Invalid URL",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "TEST/lm/api/v1/flag?_format=json",
											"host": [
												"TEST"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flaggggg?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flaggggg"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Type",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/flag?_format=json",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Type",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank brandID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/flag?_format=json",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid brandID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank flag",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid flag",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank status",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Status",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0XX0.dwOB2Yhs0Vi5cQpZswdICYeJx3YsFj11Lk3npPWJxaA",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/flag?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"flag"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Product Detail",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetailssss?_format=json&language=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetailssss"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/productDetails?_format=json&language=en&nid=52",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=&language=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?language=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_formattttt=json&language=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Lang Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "",
													"disabled": true
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&languageeee=en&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageeee",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=-1234&nid=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "-1234"
												},
												{
													"key": "nid",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en&nid=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "52",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en&niddd=52",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "niddd",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImthbmlrYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxXSwic3VicmVnaW9uIjpbOTBdLCJjb3VudHJ5IjpbMTldLCJicmFuZHMiOlsxMiwyMCw1XX0.96rK8ACkypP0gIxoJkyCXkoFV-Cy-PaVXZkGTk2XtWU",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/productDetails?_format=json&language=en&nid=25",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"productDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "25"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "FAQ Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListinggggg?_format=json&language=en&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListinggggg"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "TEST/api/v1/faqListing?_format=json&language=en&brandId=12",
											"host": [
												"TEST"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=&language=en&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?language=en&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=json&language=&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=json&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=json&language=ennnn&brandId=12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "ennnn"
												},
												{
													"key": "brandId",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank brandId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=json&language=en&brandId=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "brandId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format_Lang_Brand",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/faqListing?_format=&language=&brandId=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"faqListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "brandId",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Like/Bookmark",
							"item": [
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://test/lm/api/v1/userActivities?_format=json&nid[]=9999999",
											"protocol": "http",
											"host": [
												"test"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid[]",
													"value": "9999999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivitiesssss?_format=json&nid[]=9999999",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivitiesssss"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid[]",
													"value": "9999999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivities?_format=json&nid[]=",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid[]",
													"value": "",
													"disabled": true
												},
												{
													"key": "nid[]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivities?_format=json",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid[]",
													"value": "9999999",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivities?_format=json&nid[]=123&nid[]=@#",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid[]",
													"value": "123"
												},
												{
													"key": "nid[]",
													"value": "@#"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivities?_format=&nid[]=9999999",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "nid[]",
													"value": "9999999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4MDAxLDkwMDFdLCJicmFuZHMiOlsxMjM0LDMyXX0.RGJU9vAjZZkOmrJcdpy_D-GNHk7P5UTDWn5VUdJqn6g",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/userActivities?nid[]=9999999",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"userActivities"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "nid[]",
													"value": "9999999"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Sprint 3",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Language List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f26cbe3-8b9e-458f-8df0-ade599be05ad",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"languageCode\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"languageName\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"languageCode\",",
											"            \"languageName\"",
											"          ]",
											"        },",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"languageCode\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"languageName\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"languageCode\",",
											"            \"languageName\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].languageCode).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].languageName).to.not.eql(\"\");",
											"  }",
											" });",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/languageList?_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"languageList"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bfe166e-10a1-44bf-9191-9851771f54b4",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"title\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageSmall).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageMedium).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageLarge).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//code to fetch first consumer category and store it in a Environment Variable",
											"pm.environment.set(\"Consumer_Catgry\",jsonData.results[0].id);",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"consumerCategories"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32d08e4f-4b69-4235-b161-b310e39a6006",
										"exec": [
											"",
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"categoryId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"body\",",
											"            \"type\",",
											"            \"pointValue\",",
											"            \"categoryId\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].type).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].categoryId).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch id of first story and store it in a Environment Variable",
											" for(j=0;j<count;j++)",
											" {",
											" if((jsonData.results[j].type)==\"story\")",
											" {",
											" pm.environment.set(\"API_chain_variable\",jsonData.results[j].id);",
											" break;",
											" }",
											" }",
											" }",
											" ",
											" ",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/consumerListing?_format=json&language=en&categoryId={{Consumer_Catgry}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"consumerListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "categoryId",
											"value": "{{Consumer_Catgry}}"
										},
										{
											"key": "limit",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Story Details[Consumer]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0311eb21-aac4-4fb0-98be-8f94d1becff8",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageSmall\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"subTitle\",",
											"        \"imageSmall\",",
											"        \"imageMedium\",",
											"        \"imageLarge\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"body\",",
											"        \"pointValue\",",
											"        \"commentTitle\",",
											"        \"videoImageLarge\",",
											"        \"videoImageMedium\",",
											"        \"videoImageSmall\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid={{API_chain_variable}}&section=consumer&_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"storyDetails"
									],
									"query": [
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "section",
											"value": "consumer"
										},
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81cc4154-6199-45af-8c63-a01a6ab1b886",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"notificationsCount\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"notifications\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"notificationType\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationHeading\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationText\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationDate\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"notificationLink\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"notificationLinkType\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationBrandKey\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationBrandName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"notificationFlag\": {",
											"                  \"type\": \"integer\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"notificationType\",",
											"                \"notificationHeading\",",
											"                \"notificationText\",",
											"                \"notificationDate\",",
											"                \"notificationLink\",",
											"                \"notificationLinkType\",",
											"                \"notificationBrandKey\",",
											"                \"notificationBrandName\",",
											"                \"notificationFlag\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"notificationsCount\",",
											"        \"notifications\"",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Notifications = '+jsonData.results.notifications.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results.notifications[i].notificationType).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.notifications[i].notificationHeading).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.notifications[i].notificationText).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.notifications[i].notificationDate).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.notifications[i].notificationLinkType).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.notifications[i].notificationFlag).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "language",
										"type": "text",
										"value": "zh-hans",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/notification?_format=json&language=en",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"notification"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "limit",
											"value": "26",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6644150-d686-46d6-a501-a49743640561",
										"exec": [
											"if(responseCode.code === 201)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify message body in results",
											"pm.test('Verify Message body',function(){",
											"pm.expect(jsonData.results.message).to.include(\"Notification status updated for the user:\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"language\":\"zh-hans\"\n}"
								},
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/notification/status/save?_format=json",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"notification",
										"status",
										"save"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listing Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ef0c183-b677-43dd-a189-bbbea8eec23f",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"imageSmall\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"imageMedium\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"imageLarge\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"imageSmall\",",
											"    \"imageMedium\",",
											"    \"imageLarge\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?_format=json&section={{listingimage_section}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"listingImage"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "section",
											"value": "{{listingimage_section}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Page - Learning Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "841944fb-758e-4dc2-96a0-e66c33ae5d34",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"body\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/learningLevelSection?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"learningLevelSection"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Page - TR Trends",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b765b16c-a5ea-4e94-b644-837443bfbdeb",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"body\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/trendSection?language=en&_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"trendSection"
									],
									"query": [
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2530b37f-5e0f-4cf2-82be-5e5825595cec",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"categoryKey\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"categoryValue\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"response\": {",
											"              \"type\": \"array\",",
											"              \"items\": [",
											"                {",
											"                  \"type\": \"object\",",
											"                  \"properties\": {",
											"                    \"nid\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"tid\": {",
											"                      \"type\": \"integer\"",
											"                    },",
											"                    \"imageLarge\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"imageMedium\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"imageSmall\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"displayTitle\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"subTitle\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"brandKey\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"type\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"pointValue\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"categoryKey\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"categoryValue\": {",
											"                      \"type\": \"string\"",
											"                    }",
											"                  },",
											"                  \"required\": [",
											"                    \"nid\",",
											"                    \"tid\",",
											"                    \"imageLarge\",",
											"                    \"imageMedium\",",
											"                    \"imageSmall\",",
											"                    \"displayTitle\",",
											"                    \"subTitle\",",
											"                    \"brandKey\",",
											"                    \"type\",",
											"                    \"pointValue\",",
											"                    \"categoryKey\",",
											"                    \"categoryValue\"",
											"                  ]",
											"                }",
											"              ]",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"categoryKey\",",
											"            \"categoryValue\",",
											"            \"response\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Response",
											" pm.test('Count of Objects in array of Response = '+jsonData.results[0].response.length, function () {",
											"    count = jsonData.results[0].response.length;",
											"   });",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[0].response[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].response[i].subTitle).to.not.eql(\"\");",
											"  }",
											"  });",
											"   }",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/search?_format=json&searchTerm={{searchTerm}}&language=en",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"search"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "searchTerm",
											"value": "{{searchTerm}}"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Page - Spotlight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c564e90c-8d65-41ea-baf0-9569b62a8902",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"brandName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"textOverlay\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"displayTitle\",",
											"            \"type\",",
											"            \"brandName\",",
											"            \"body\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\",",
											"            \"textOverlay\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].type).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/spotlightSection?language=en&_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"spotlightSection"
									],
									"query": [
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Language List",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/languageListtttt?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"languageListtttt"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "TEST/api/v1/languageList?_format=json",
											"host": [
												"TEST"
											],
											"path": [
												"api",
												"v1",
												"languageList"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/languageList?_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"languageList"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/languageList?",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"languageList"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/languageList?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"languageList"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Consumer Category",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategoriessss?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategoriessss"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "test/api/v1/consumerCategories?_format=json&language=en",
											"host": [
												"test"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?_format=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?language=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/consumerCategories?_format=json&language=!@#$%^&#$%^%26",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"consumerCategories"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "!@#$%^&"
												}
											],
											"hash": "$%^%26"
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Story Details[Consumer]",
							"item": [
								{
									"name": "Invalid end Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetailssss?nid=116&language=zh-hans&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetailssss"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "TEST/api/v1/storyDetails?nid=116&language=zh-hans&_format=json&section=sellingTips",
											"host": [
												"TEST"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=&language=zh-hans&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": ""
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?language=zh-hans&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?language=zh-hans&_format=json&section=sellingTips&nid=1234",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												},
												{
													"key": "nid",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans&_format=&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank section",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans&_format=json&section=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without section Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid section Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=zh-hans &_format=json&section=selling",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "zh-hans "
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "selling"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid=116&language=ennnn&_format=json&section=sellingTips",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"storyDetails"
											],
											"query": [
												{
													"key": "nid",
													"value": "116"
												},
												{
													"key": "language",
													"value": "ennnn"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "sellingTips"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Listing Image",
							"item": [
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}test/api/v1/listingImage?_format=json&section=trend",
											"host": [
												"{{protocol}}test"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "trend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid End Point",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImageeee?_format=json&section=trend",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImageeee"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "trend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?_format=json&section=trend",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "trend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?_format=&section=trend",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "section",
													"value": "trend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?section=trend",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "section",
													"value": "trend"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Section",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?section=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "section",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Section Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "section",
													"value": "",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Section Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/listingImage?_format=json&section=!@",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"listingImage"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "section",
													"value": "!@"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Notifications",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notificationnnn?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notificationnnn"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}TEST/lm/api/v1/notification?_format=json&language=en",
											"host": [
												"{{protocol}}TEST"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?_format=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?_format=json&language=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3NiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.e09ZocNmAPSIZcWiPqIr8X7TQ_VrTo_UWmVYjA3PZ-Y",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/lm/api/v1/notification?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"notification"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Spotlight",
							"item": [
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSectin?language=en&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSectin"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4M10sInN1YnJlZ2lvbiI6W10sImNvdW50cnkiOltdLCJicmFuZHMiOlsxMjM0LDMyXX0.uMtgrdcu7jz5SJ1kszoCHrDZ1gXKvTGPtYMYhs4dWV",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSection?language=en&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "Authentication",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Params",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSection?language=&_format=",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSection"
											],
											"query": [
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid format",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4M10sInN1YnJlZ2lvbiI6W10sImNvdW50cnkiOltdLCJicmFuZHMiOlsxMjM0LDMyXX0.uMtgrdcu7jz5SJ1kszoCHrDZ1gXKvTGPtYMYhs4dWVs",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSection?language=en&_format=xml",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "xml"
												},
												{
													"key": "Authentication",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOls4M10sInN1YnJlZ2lvbiI6W10sImNvdW50cnkiOltdLCJicmFuZHMiOlsxMjM0LDMyXX0.uMtgrdcu7jz5SJ1kszoCHrDZ1gXKvTGPtYMYhs4dWVs",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSection?language=enn&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSection"
											],
											"query": [
												{
													"key": "language",
													"value": "enn"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "Authentication",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No Params",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/spotlightSection?",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"spotlightSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Tr trends in Home page",
							"item": [
								{
									"name": "Invalid Url",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trend?language=en&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trend"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No Params",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?language=&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?language=enn&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": "enn"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?language=en&_format=",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?language=en&_format=xml",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "xml"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Call",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/trendSection?language=en&_format=json",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"trendSection"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Consumer Listing",
							"item": [
								{
									"name": "No Params",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "categoryId",
													"value": "86693",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank language code",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=&_format=json&categoryId=86693&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid language code",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=enn&_format=json&categoryId=86693",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "enn"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=en&_format=&categoryId=86693&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=en&_format=xml&categoryId=86693&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "xml"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank categoryid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=en&_format=json&categoryId=&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": ""
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid categoryid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=en&_format=json&categoryId=866936&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "866936"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerLisg?language=en&_format=json&categoryId=86693&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerLisg"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid call",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=en&_format=json&categoryId=86693&limit=5",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Chinese",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{Base}}/api/v1/consumerListing?language=zh-hans&_format=json&categoryId=86693",
											"host": [
												"{{Base}}"
											],
											"path": [
												"api",
												"v1",
												"consumerListing"
											],
											"query": [
												{
													"key": "language",
													"value": "zh-hans"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId",
													"value": "86693"
												},
												{
													"key": "limit",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Invalid search",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOlsyMDAwXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.9MNcPln-tgf1zvhNZX1la-Rc0sHkWePV0VHK3eYbwwI",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base}}/lm/api/v1/search?_format =json&searchTerm=tes&langcode=en",
											"host": [
												"{{Base}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"search"
											],
											"query": [
												{
													"key": "_format ",
													"value": "json"
												},
												{
													"key": "searchTerm",
													"value": "tes"
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "langcode",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2ggSmFpbiIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoyLCJyZWdpb24iOltdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbXX0.DdzTBejgPC-XTSR1-ABsEfgDHFL5UN2DbFEfEPbeYC0",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{Base}}/lm/api/v1/seach?_format =json&searchTerm=sname&langcode=en",
											"host": [
												"{{Base}}"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"seach"
											],
											"query": [
												{
													"key": "_format ",
													"value": "json"
												},
												{
													"key": "searchTerm",
													"value": "sname"
												},
												{
													"key": "langcode",
													"value": "en"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Sprint 4",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Bookmark Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b1c3a8-a3ff-45e4-9063-817a393e5a4b",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"bookmark\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"brandKey\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"brandName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"sectionKey\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"sectionName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"pointValue\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"imageSmall\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageMedium\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageLarge\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"faqId\": {",
											"                  \"type\": \"integer\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"title\",",
											"                \"brandKey\",",
											"                \"brandName\",",
											"                \"sectionKey\",",
											"                \"sectionName\",",
											"                \"pointValue\",",
											"                \"imageSmall\",",
											"                \"imageMedium\",",
											"                \"imageLarge\",",
											"                \"faqId\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"bookmark\"",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.bookmark.length, function () {",
											"    count = jsonData.results.bookmark.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  console.log(jsonData.results.bookmark[0].title);",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results.bookmark[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.bookmark[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.bookmark[i].brandKey).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.bookmark[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/bookmarksListing?_format=json&language=en&type=myLibrary&limit=10",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"bookmarksListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "type",
											"value": "myLibrary"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "My stamps API ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebebbadd-5bfe-4892-9fff-46133997465a",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"tid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"tid\",",
											"            \"title\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].tid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageSmall).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageMedium).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].imageLarge).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/myStamps?_format=json&language=en",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"myStamps"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "All Stamps API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b36430d5-f9c5-4a21-b38d-5dc595bd3c2c",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"tid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"null\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"status\": {",
											"              \"type\": \"boolean\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"tid\",",
											"            \"title\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"status\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[0].tid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].imageSmall).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].imageMedium).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].imageLarge).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[0].status).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/allStamps?_format=json&language=en",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"allStamps"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Leaderboard",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "decfae9b-9dff-4de0-a67b-bda4a4d5647a",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userData\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"uid\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"rank\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"stamps\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"uid\",",
											"            \"pointValue\",",
											"            \"rank\",",
											"            \"stamps\"",
											"          ]",
											"        },",
											"        \"sectionData\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"uid\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"rank\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"pointValue\": {",
											"                  \"type\": \"integer\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"uid\",",
											"                \"rank\",",
											"                \"pointValue\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userData\",",
											"        \"sectionData\"",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of sectionData",
											" pm.test('Count of Objects in array of sectionData = '+jsonData.results.sectionData.length, function () {",
											"    count = jsonData.results.sectionData.length;",
											"   });",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.userData.uid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.userData.pointValue).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.userData.rank).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.userData.stamps).to.not.eql(\"\");",
											"});",
											"",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results.sectionData[i].uid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.sectionData[i].rank).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.sectionData[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/leaderboard?_format=json&language=en&section=world&limit=15",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"leaderboard"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "section",
											"value": "world"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "sectionFilter",
											"value": "4",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Page -Insider Corner Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dbb4998-28cc-43f2-a573-cb341f6e3b30",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"firstName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"lastName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"quoteSubTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"occupation\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"body\",",
											"            \"firstName\",",
											"            \"lastName\",",
											"            \"quoteSubTitle\",",
											"            \"occupation\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].firstName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].lastName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].occupation).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].quoteSubTitle).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerSection?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"insiderCornerSection"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User Profile Rank",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d555806a-99d6-47f5-944a-15920da3d6f4",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"userLeft\": {",
											"              \"type\": \"object\"",
											"            },",
											"            \"userCenter\": {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"uid\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"rank\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"uid\",",
											"                \"rank\"",
											"              ]",
											"            },",
											"            \"userRight\": {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"uid\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"rank\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"uid\",",
											"                \"rank\"",
											"              ]",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"userLeft\",",
											"            \"userCenter\",",
											"            \"userRight\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify keys that cannot be set as null",
											"pm.test('Keys that cannot be set as null',function(){",
											"pm.expect(jsonData.results[0].userCenter.uid).to.not.eql(\"\");",
											"pm.expect(jsonData.results[0].userCenter.rank).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/userProfileRank?_format=json&language=en",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"userProfileRank"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Page -Learning Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b403c3a9-a41a-4841-9756-5a83897bac76",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"body\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/learningLevelSection?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"learningLevelSection"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Welcome Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93d4a41f-cbd2-4705-9c63-f649708491e1",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify key that cannot be set as null",
											"pm.test('Verify key that cannot be set as null', function(){",
											"pm.expect(jsonData.results.message).to.not.eql(\"\")    ",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/welcomeMessage?language=en&_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"welcomeMessage"
									],
									"query": [
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Static Translations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7641f1b-849b-49ec-bd29-c14738adf46c",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"SourceKey\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"StringTransaltion\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"SourceKey\",",
											"            \"StringTransaltion\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]   ",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].SourceKey).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].StringTransaltion).to.not.eql(\"\");",
											"  }",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/translationKey?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"translationKey"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terms and Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23d0e90b-0850-4f87-951d-b5c365175fae",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"title\",",
											"        \"body\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/termAndCondition?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"termAndCondition"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Privacy Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9b52c0f-e01f-4dcd-a7e4-53ce9cd03814",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"title\",",
											"        \"body\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/privacyPolicy?_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"privacyPolicy"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Home page - Insider corner",
							"item": [
								{
									"name": "No params",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSectin?_format=json&language=en",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSectin"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										},
										"description": "Invalid URL"
									},
									"response": []
								},
								{
									"name": "Blank format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=&language=en",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=xml&language=en",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "xml"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=json&language=",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid language code ",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=json&language=esi",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "esi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request type",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=json&language=ennn",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "ennn"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid token",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlBvb2phIE5hbndhbCIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo0LCJyZWdpb24iOltdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTJdfQ.9gLAGZyMzOcVmXP5aKdS_O_WlqWbgcjoZ1kfiIqzKL",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://dev-cms-tr-otm.elcompanies.com/api/v1/insiderCornerSection?_format=json&language=en",
											"protocol": "https",
											"host": [
												"dev-cms-tr-otm",
												"elcompanies",
												"com"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerSection"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Stamps",
							"item": [
								{
									"name": "My stamps",
									"item": [
										{
											"name": "Without format",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json",
															"disabled": true
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without language",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?_format=json",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without Params",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json",
															"disabled": true
														},
														{
															"key": "language",
															"value": "en",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid URL",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamp?_format=json&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamp"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid request type",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?_format=json&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid language",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?_format=json&language=en@dfhh",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en@dfhh"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid format",
											"request": {
												"auth": {
													"type": "bearer"
												},
												"method": "GET",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/myStamps?_format=xml&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"myStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "xml"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "All Stamps",
									"item": [
										{
											"name": "Without format",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json",
															"disabled": true
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without language",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?_format=json",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid format",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?_format=xml&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "xml"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid language",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?_format=json&language=en@fdgdj",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en@fdgdj"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "No Params",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json",
															"disabled": true
														},
														{
															"key": "language",
															"value": "en",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid URL",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamp?_format=json&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamp"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Request",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVpZCI6ImFiYzUzIiwicmVnaW9uIjpbIjIwMDAiLCI4MDAxIiwiMjMwMCIsIjI2MDAiLCI5MDAxIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MjMxIiwiMDAwMDk1ODEyNSIsIjgxIiwiOTEiXSwiY291bnRyeSI6WyIwMDAwOTU4MjMxIiwiMTEiLCIxMiIsIjIxIl0sImJyYW5kcyI6WyIxMiJdfQ.lgeHFKHicdcpnzL1CMx6uo1hrR84bqzeYuNTxo-Imic",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://10.253.97.99/lm/api/v1/allStamps?_format=json&language=en",
													"protocol": "http",
													"host": [
														"10",
														"253",
														"97",
														"99"
													],
													"path": [
														"lm",
														"api",
														"v1",
														"allStamps"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Bookmark Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListinggggg?_format=json&language=en&type=myLibrary",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListinggggg"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid URL",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "test/lm/api/v1/bookmarksListing?_format=json&language=en&type=myLibrary",
											"host": [
												"test"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=json&language=en&type=myLibrary",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=&language=en&type=myLibrary",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=json&language=&type=myLibrary",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=json&language=ennnnn&type=myLibrary",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "ennnnn"
												},
												{
													"key": "type",
													"value": "myLibrary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Type",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=json&language=en&type=",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Type",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjo3MiwicmVnaW9uIjpbXSwic3VicmVnaW9uIjpbXSwiY291bnRyeSI6W10sImJyYW5kcyI6W119.Y_9dtWd8Ba-DJjgPT3wV0Itz7rfd-0hU2ue5vSIlyNs",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://10.253.97.99/lm/api/v1/bookmarksListing?_format=json&language=en&type=videooo",
											"protocol": "http",
											"host": [
												"10",
												"253",
												"97",
												"99"
											],
											"path": [
												"lm",
												"api",
												"v1",
												"bookmarksListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "type",
													"value": "videooo"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Sprint 2",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Learning Level Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ec9a76-14fc-4052-aaef-61e50ed48a69",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"categoryId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"title\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"categoryId\",",
											"            \"title\",",
											"            \"subTitle\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ; i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].categoryId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch categoryId of first result and store it in a Global Variable",
											"pm.environment.set(\"API_chain_variable\",jsonData.results[0].categoryId);",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "nid",
										"value": "18",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=json&language=en&brandId={{brand_id_set}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"learningLevels"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "brandId",
											"value": "{{brand_id_set}}"
										},
										{
											"key": "limit",
											"value": "25",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User Activity for Levels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4bf2d09-ca95-4806-a47e-ac70c90ad498",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"categoryId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"percentageCompleted\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"completedCount\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"totalCount\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"likeCount\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"name\",",
											"            \"categoryId\",",
											"            \"percentageCompleted\",",
											"            \"completedCount\",",
											"            \"totalCount\",",
											"            \"likeCount\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"   ",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.name).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.categoryId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.percentageCompleted).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.completedCount).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.totalCount).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.likeCount).to.not.eql(\"\");",
											"});",
											"",
											"",
											"var compare = pm.environment.get(\"API_chain_variable\");",
											"console.log(compare);",
											"",
											"//compare API chain variable with Catrgory ID",
											"pm.test('Compare API chain variable with categoryID',function(){",
											"pm.expect(jsonData.results[0].categoryId).to.eql(compare);",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?_format=json&language=en&categoryId[]={{API_chain_variable}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"userActivitiesLevel"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "categoryId[]",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "categoryId[]",
											"value": "86523",
											"disabled": true
										},
										{
											"key": "categoryId[]",
											"value": "86703",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Learning Module Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ded8c8a2-52c2-4c69-b611-05cf2b2bd1ab",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0 ;i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"//code to fetch the nid of first result",
											"pm.test(\"Fetch nid of first result in listing\",function(){",
											"pm.environment.set(\"API_chain_variable\",jsonData.results[0].nid);    ",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&language=en&categoryId={{API_chain_variable}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"modulesListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "categoryId",
											"value": "{{API_chain_variable}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Module Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9dc5903-5eba-447d-bde3-d1582d8c8c34",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"articulateFile\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"categoryName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"langcode\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"categoryId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"interactiveContentPrevious\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"interactiveContentNext\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"displayTitle\",",
											"        \"articulateFile\",",
											"        \"pointValue\",",
											"        \"categoryName\",",
											"        \"langcode\",",
											"        \"categoryId\",",
											"        \"interactiveContentPrevious\",",
											"        \"interactiveContentNext\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.articulateFile).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.categoryName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.langcode).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.categoryId).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en&nid={{API_chain_variable}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"moduledetails"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05117aaa-59e5-4288-9c56-3aeb13bb5ecd",
										"exec": [
											"if(responseCode.code === 201)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"parentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"comment\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"tags\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"language\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"commentTime\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"parentId\",",
											"        \"commentId\",",
											"        \"comment\",",
											"        \"tags\",",
											"        \"language\",",
											"        \"commentTime\",",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.parentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.commentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.comment).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.language).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.commentTime).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.message).to.not.eql(\"\");",
											"});",
											"",
											"",
											"//code to verify comment message and Parent Id value",
											"pm.test(\"Verify comment message and Parent Id value\",function(){",
											"pm.expect(jsonData.results.message).to.eql(\"Comment successfully added.\"); ",
											"pm.expect(jsonData.results.parentId).to.eql(0);",
											"});",
											"",
											"",
											"//get comment Id and store it in a Environment Variable",
											" pm.environment.set(\"API_chain_variable\",jsonData.results.commentId);",
											"",
											"",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nid\": {{nid_postcomment_set}},\n  \"parentId\": \"0\",\n  \"comment\": \"Fresh Comment for Region  Testing\",\n  \"language\": \"en\",\n  \"tags\": [\n        ]\n}\n\n\n"
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"comment"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "commentsListing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79f5962e-dc50-4adc-830c-075bf2668b46",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"commentId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"parentId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"userId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"commentTime\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"comment\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"commentEditFlag\": {",
											"              \"type\": \"boolean\"",
											"            },",
											"            \"tags\": {",
											"              \"type\": \"array\",",
											"              \"items\": {}",
											"            },",
											"            \"language\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"commentId\",",
											"            \"parentId\",",
											"            \"userId\",",
											"            \"commentTime\",",
											"            \"comment\",",
											"            \"commentEditFlag\",",
											"            \"tags\",",
											"            \"language\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].commentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].parentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].userId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].commentTime).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].comment).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].commentEditFlag).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].language).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch API chain variable[Env Variable] and store it in a variable",
											"var compare = pm.environment.get(\"API_chain_variable\");",
											"console.log(compare);",
											"",
											"",
											"//get first commentId and compare it with Environment Variable",
											"pm.test('Compare first commentId and environment variable',function(){",
											"pm.expect(jsonData.results[0].commentId).eql(compare); ",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "nid",
										"value": "18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_format=json&nid={{nid_postcomment_set}}",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"commentsListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "nid",
											"value": "{{nid_postcomment_set}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Comment [TRLX Wave 2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbbbd5c6-0a94-4edc-b271-2c20aa8e13ec",
										"exec": [
											"if(responseCode.code === 201)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"parentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"comment\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"tags\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"language\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"commentTime\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"parentId\",",
											"        \"commentId\",",
											"        \"comment\",",
											"        \"tags\",",
											"        \"language\",",
											"        \"commentTime\",",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.parentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.commentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.comment).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.language).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.commentTime).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.message).to.not.eql(\"\");",
											"});",
											"",
											"",
											"//code to verify value of Message",
											"pm.test(\"Verify Value of message\",function() {",
											"pm.expect(jsonData.results.message).to.eql(\"Comment successfully added.\");",
											"});",
											"}",
											"",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "PUT",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nid\": {{nid_postcomment_set}},\n  \"commentId\": \"{{API_chain_variable}}\",\n  \"parentId\": \"0\",\n  \"comment\": \"Update to Comment\",\n  \"language\": \"en\",\n   \"tags\": []\n}\n"
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/comment/edit?_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"comment",
										"edit"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment[TRLX Wave 2]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6926385a-e7e1-472f-99e3-fc1a3fc9ff8c",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"commentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"language\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"message\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"commentId\",",
											"        \"language\",",
											"        \"message\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.commentId).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.language).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.message).to.not.eql(\"\");",
											"});",
											"",
											"",
											"//code to verify value of Message",
											"pm.test(\"Verify Value of message\",function() {",
											"pm.expect(jsonData.results.message).to.eql(\"Comment successfully deleted.\");",
											"});",
											"}",
											"",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/comment/delete/en/{{API_chain_variable}}?_format=json",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"comment",
										"delete",
										"en",
										"{{API_chain_variable}}"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sellingTips Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39914908-7632-457b-8ca7-5746c845f083",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"displayTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"type\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"displayTitle\",",
											"            \"subTitle\",",
											"            \"body\",",
											"            \"type\",",
											"            \"pointValue\",",
											"            \"imageLarge\",",
											"            \"imageMedium\",",
											"            \"imageSmall\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].id).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].type).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch id of first story and store it in a Environment Variable",
											" for(j=0;j<count;j++)",
											" {",
											" if((jsonData.results[j].type)==\"story\")",
											" {",
											" pm.environment.set(\"API_chain_variable\",jsonData.results[j].id);",
											" break;",
											" }",
											" }",
											" }",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "limit",
										"value": "27",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_format=json&language=en&limit=33",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"sellingTipsListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "limit",
											"value": "33"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Story Details[Selling Tips]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4be07e95-eba9-4d06-a862-17aced556d3b",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarouselTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarousel\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"subTitle\",",
											"        \"imageSmall\",",
											"        \"imageMedium\",",
											"        \"imageLarge\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"body\",",
											"        \"pointValue\",",
											"        \"commentTitle\",",
											"        \"productCarouselTitle\",",
											"        \"videoImageLarge\",",
											"        \"videoImageMedium\",",
											"        \"videoImageSmall\",",
											"        \"productCarousel\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid={{API_chain_variable}}&section=sellingTips&_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"storyDetails"
									],
									"query": [
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "section",
											"value": "sellingTips"
										},
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04020d0b-e3ae-4059-adf5-4504ba69ac6f",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"   ",
											"   ",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify value of Results cannot be set as null",
											"  pm.test(\"Verify Results cannot be set as null\",function () {",
											"  pm.expect(jsonData.results).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/getUserPoints?_format=json",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"getUserPoints"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "nid",
											"value": "99",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Content View [Add User Point]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efa75429-2944-4f80-8dd8-8d7d4d6c36a9",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//code to Verify Response Headers and their values",
											"pm.test(\"Verify Response Headers\", function () {",
											"pm.response.to.be.header(\"Content-Type\",\"application/json\");",
											"pm.response.to.be.header(\"X-Content-Type-Options\",\"nosniff\");",
											"pm.response.to.be.header(\"X-XSS-Protection\",\"1; mode=block\");",
											"});",
											"",
											"",
											"//code to Verify Response Time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"",
											"//code to verify value of Results cannot be set as null",
											"  pm.test(\"Verify Results cannot be set as null\",function () {",
											"  pm.expect(jsonData.results).to.not.eql(\"\");",
											"});",
											"}",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"faq\",\n  \"brandId\": \"01\"\n}"
								},
								"url": {
									"raw": "{{lm_url}}/lm/api/v1/contentViewFlag?_format=json",
									"host": [
										"{{lm_url}}"
									],
									"path": [
										"lm",
										"api",
										"v1",
										"contentViewFlag"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en",
											"disabled": true
										},
										{
											"key": "nid",
											"value": "77",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "insiderCorner Listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d37b8e79-1d00-422f-910d-0f8698659a39",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"nid\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"body\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"firstName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"lastName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"occupation\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"subTitle\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageSmall\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageMedium\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageLarge\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"pointValue\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"nid\",",
											"            \"body\",",
											"            \"firstName\",",
											"            \"lastName\",",
											"            \"occupation\",",
											"            \"subTitle\",",
											"            \"imageSmall\",",
											"            \"imageMedium\",",
											"            \"imageLarge\",",
											"            \"pointValue\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"pager\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"count\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"pages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"items_per_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"current_page\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"next_page\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"count\",",
											"        \"pages\",",
											"        \"items_per_page\",",
											"        \"current_page\",",
											"        \"next_page\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\",",
											"    \"pager\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"",
											"//below code is to count the number of Objects in array of Results",
											" pm.test('Count of Objects in array of Results = '+jsonData.results.length, function () {",
											"    count = jsonData.results.length;",
											"   });",
											"   ",
											"   ",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  for(i=0;i<count ;i++)",
											"  {",
											"  pm.expect(jsonData.results[i].nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].firstName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].lastName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].occupation).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results[i].pointValue).to.not.eql(\"\");",
											"  }",
											"});",
											"",
											"",
											"//fetch id of first value and store it in a Environment Variable",
											" pm.environment.set(\"API_chain_variable\",jsonData.results[0].nid);",
											" }",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "nid",
										"value": "18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_format=json&language=en&limit=15",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"insiderCornerListing"
									],
									"query": [
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "limit",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Story Details[Insider Corner]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2525b64e-d462-4933-a503-5c78a5234639",
										"exec": [
											"if(responseCode.code === 200)",
											"{",
											"",
											"//Parsing Response in JSON format and storing in a Variable",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"//call global variable to verify Common Assertions",
											"eval(pm.globals.get(\"commonTests\"))();",
											"",
											"",
											"//storing schema in a variable",
											"var schema = {",
											"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"results\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"nid\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"displayTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"imageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"listingImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"video\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"subTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"firstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"lastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"occupation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"country\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"socialMediaHandles\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"handle\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"title\",",
											"                \"handle\"",
											"              ]",
											"            }",
											"          ]",
											"        },",
											"        \"body\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"pointValue\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"commentTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarouselTitle\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageLarge\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageMedium\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"videoImageSmall\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"productCarousel\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"subTitle\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageSmall\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageMedium\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageLarge\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"title\",",
											"                \"subTitle\",",
											"                \"imageSmall\",",
											"                \"imageMedium\",",
											"                \"imageLarge\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"subTitle\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageSmall\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageMedium\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageLarge\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"title\",",
											"                \"subTitle\",",
											"                \"imageSmall\",",
											"                \"imageMedium\",",
											"                \"imageLarge\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"title\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"subTitle\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageSmall\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageMedium\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"imageLarge\": {",
											"                  \"type\": \"string\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"title\",",
											"                \"subTitle\",",
											"                \"imageSmall\",",
											"                \"imageMedium\",",
											"                \"imageLarge\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"nid\",",
											"        \"title\",",
											"        \"displayTitle\",",
											"        \"imageSmall\",",
											"        \"imageMedium\",",
											"        \"imageLarge\",",
											"        \"listingImageSmall\",",
											"        \"listingImageMedium\",",
											"        \"video\",",
											"        \"subTitle\",",
											"        \"firstName\",",
											"        \"lastName\",",
											"        \"occupation\",",
											"        \"country\",",
											"        \"socialMediaHandles\",",
											"        \"body\",",
											"        \"pointValue\",",
											"        \"commentTitle\",",
											"        \"productCarouselTitle\",",
											"        \"videoImageLarge\",",
											"        \"videoImageMedium\",",
											"        \"videoImageSmall\",",
											"        \"productCarousel\"",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"results\"",
											"  ]",
											"};",
											"",
											"",
											"//code to verify schema with Response Body",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema,false,true)).to.be.true;",
											"});",
											"",
											"",
											"//code to verify values of keys that cannot be set as null",
											"  pm.test(\"Verify Response Keys that cannot be set as null\",function () {",
											"  pm.expect(jsonData.results.nid).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.title).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.displayTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.subTitle).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.firstName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.lastName).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.occupation).to.not.eql(\"\");",
											"  pm.expect(jsonData.results.country).to.not.eql(\"\");",
											"   pm.expect(jsonData.results.pointValue).to.not.eql(\"\");",
											"});",
											" }",
											"",
											"",
											"else",
											"  {  pm.test(\"Status code is not 200\", function () {",
											"     pm.response.to.have.status(200);",
											"});  ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}{{hostname}}/api/v1/storyDetails?nid={{API_chain_variable}}&section=insiderCorner&_format=json&language=en",
									"host": [
										"{{protocol}}{{hostname}}"
									],
									"path": [
										"api",
										"v1",
										"storyDetails"
									],
									"query": [
										{
											"key": "nid",
											"value": "{{API_chain_variable}}"
										},
										{
											"key": "section",
											"value": "insiderCorner"
										},
										{
											"key": "_format",
											"value": "json"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Module Detail",
							"item": [
								{
									"name": "Invalid End Point",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetailssstest12?_format=json&language=en&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetailssstest12"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/moduledetails?_format=json&nid=77&language=en",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid",
													"value": "77"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_formattt123=json&language=en&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_formattt123",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "77"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=&language=en&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?language=en&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Lang",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en@12!&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en@12!"
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String Langugage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&languageees12=en&nid=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageees12",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en&nid=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en&niddd123=77",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "niddd123",
													"value": "77"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/moduledetails?_format=json&language=en&nid=abc@123",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"moduledetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "nid",
													"value": "abc@123"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Comment - Tag",
							"item": [
								{
									"name": "Blank ID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiUHJhc2hhbnQiLCJsYXN0TmFtZSI6IkNoaW50YWwiLCJlbWFpbCI6InByYXNoYW50LmNoaW50YWxAbWluZHN0aXguY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJ1aWQiOiI1YmVlOGY2NWU4Nzk2NzIwNmNmODYwZTEiLCJyZWdpb24iOlsiMjAwMCIsIjI2MDAiLCIyMzAwIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MTI5IiwiMDAwMDk2MDc0NCIsIjAwMDA5NTgxMjUiLCIwMDAwOTYwNzMzIiwiOTAiLCIwMDAwOTczNzM2Il0sImNvdW50cnkiOlsiMDAwMDk1ODE4MiIsIjI2IiwiMDAwMDk1ODEzNSIsIjAwMDA5NTgyMzEiLCIwMDAwOTU4MjEyIiwiMTEiLCIwMDAwOTU4MjE1Il0sImJyYW5kcyI6WyIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiJdfQ.0mEd9egWsmnAs4F8BRPta7WpIceruTCLB3MUFcxZzJE",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 274,\n  \"parentId\": \"0\",\n  \"comment\": \"This is the latest comment for Prashant by Prashant\",\n  \"language\": \"en\",\n  \"tags\": [\n    {\n      \"id\": \"\",\n      \"firstName\": \"Prashant\",\n      \"lastName\": \"Chintal\",\n      \"workEmailAddress\": \"prashant.chintal@mindstix.com\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiUHJhc2hhbnQiLCJsYXN0TmFtZSI6IkNoaW50YWwiLCJlbWFpbCI6InByYXNoYW50LmNoaW50YWxAbWluZHN0aXguY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJ1aWQiOiI1YmVlOGY2NWU4Nzk2NzIwNmNmODYwZTEiLCJyZWdpb24iOlsiMjAwMCIsIjI2MDAiLCIyMzAwIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MTI5IiwiMDAwMDk2MDc0NCIsIjAwMDA5NTgxMjUiLCIwMDAwOTYwNzMzIiwiOTAiLCIwMDAwOTczNzM2Il0sImNvdW50cnkiOlsiMDAwMDk1ODE4MiIsIjI2IiwiMDAwMDk1ODEzNSIsIjAwMDA5NTgyMzEiLCIwMDAwOTU4MjEyIiwiMTEiLCIwMDAwOTU4MjE1Il0sImJyYW5kcyI6WyIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiJdfQ.0mEd9egWsmnAs4F8BRPta7WpIceruTCLB3MUFcxZzJE",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 274,\n  \"parentId\": \"0\",\n  \"comment\": \"This is the latest comment for Prashant by Prashant\",\n  \"language\": \"en\",\n  \"tags\": [\n    {\n      \"id\": \"123333333\",\n      \"firstName\": \"Prashant\",\n      \"lastName\": \"Chintal\",\n      \"workEmailAddress\": \"prashant.chintal@mindstix.com\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank First Name",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiUHJhc2hhbnQiLCJsYXN0TmFtZSI6IkNoaW50YWwiLCJlbWFpbCI6InByYXNoYW50LmNoaW50YWxAbWluZHN0aXguY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJ1aWQiOiI1YmVlOGY2NWU4Nzk2NzIwNmNmODYwZTEiLCJyZWdpb24iOlsiMjAwMCIsIjI2MDAiLCIyMzAwIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MTI5IiwiMDAwMDk2MDc0NCIsIjAwMDA5NTgxMjUiLCIwMDAwOTYwNzMzIiwiOTAiLCIwMDAwOTczNzM2Il0sImNvdW50cnkiOlsiMDAwMDk1ODE4MiIsIjI2IiwiMDAwMDk1ODEzNSIsIjAwMDA5NTgyMzEiLCIwMDAwOTU4MjEyIiwiMTEiLCIwMDAwOTU4MjE1Il0sImJyYW5kcyI6WyIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiJdfQ.0mEd9egWsmnAs4F8BRPta7WpIceruTCLB3MUFcxZzJE",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 274,\n  \"parentId\": \"0\",\n  \"comment\": \"This is the latest comment for Prashant by Prashant\",\n  \"language\": \"en\",\n  \"tags\": [\n    {\n      \"id\": \"5bee8f65e87967206cf860e1\",\n      \"firstName\": \"\",\n      \"lastName\": \"Chintal\",\n      \"workEmailAddress\": \"prashant.chintal@mindstix.com\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid First Name",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiUHJhc2hhbnQiLCJsYXN0TmFtZSI6IkNoaW50YWwiLCJlbWFpbCI6InByYXNoYW50LmNoaW50YWxAbWluZHN0aXguY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJ1aWQiOiI1YmVlOGY2NWU4Nzk2NzIwNmNmODYwZTEiLCJyZWdpb24iOlsiMjAwMCIsIjI2MDAiLCIyMzAwIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MTI5IiwiMDAwMDk2MDc0NCIsIjAwMDA5NTgxMjUiLCIwMDAwOTYwNzMzIiwiOTAiLCIwMDAwOTczNzM2Il0sImNvdW50cnkiOlsiMDAwMDk1ODE4MiIsIjI2IiwiMDAwMDk1ODEzNSIsIjAwMDA5NTgyMzEiLCIwMDAwOTU4MjEyIiwiMTEiLCIwMDAwOTU4MjE1Il0sImJyYW5kcyI6WyIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiJdfQ.0mEd9egWsmnAs4F8BRPta7WpIceruTCLB3MUFcxZzJE",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 274,\n  \"parentId\": \"0\",\n  \"comment\": \"This is the latest comment for Prashant by Prashant\",\n  \"language\": \"en\",\n  \"tags\": [\n    {\n      \"id\": \"5bee8f65e87967206cf860e1\",\n      \"firstName\": \"Kanika\",\n      \"lastName\": \"Chintal\",\n      \"workEmailAddress\": \"prashant.chintal@mindstix.com\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Email Address",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZmlyc3ROYW1lIjoiUHJhc2hhbnQiLCJsYXN0TmFtZSI6IkNoaW50YWwiLCJlbWFpbCI6InByYXNoYW50LmNoaW50YWxAbWluZHN0aXguY29tIiwiaWF0IjoxNTE2MjM5MDIyLCJ1aWQiOiI1YmVlOGY2NWU4Nzk2NzIwNmNmODYwZTEiLCJyZWdpb24iOlsiMjAwMCIsIjI2MDAiLCIyMzAwIl0sInN1YnJlZ2lvbiI6WyIwMDAwOTU4MTI5IiwiMDAwMDk2MDc0NCIsIjAwMDA5NTgxMjUiLCIwMDAwOTYwNzMzIiwiOTAiLCIwMDAwOTczNzM2Il0sImNvdW50cnkiOlsiMDAwMDk1ODE4MiIsIjI2IiwiMDAwMDk1ODEzNSIsIjAwMDA5NTgyMzEiLCIwMDAwOTU4MjEyIiwiMTEiLCIwMDAwOTU4MjE1Il0sImJyYW5kcyI6WyIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiJdfQ.0mEd9egWsmnAs4F8BRPta7WpIceruTCLB3MUFcxZzJE",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 274,\n  \"parentId\": \"0\",\n  \"comment\": \"This is the latest comment for Prashant by Prashant\",\n  \"language\": \"en\",\n  \"tags\": [\n    {\n      \"id\": \"5bee8f65e87967206cf860e1\",\n      \"firstName\": \"Prashant\",\n      \"lastName\": \"Chintal\",\n      \"workEmailAddress\": \"\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Learning Level Litsing",
							"item": [
								{
									"name": "Learning Module Listing",
									"item": [
										{
											"name": "Invalid End Point",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
												},
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListingTest123?_format=json&language=en&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListingTest123"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Host Name",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
												},
												"url": {
													"raw": "https://localhost:1082/api/v1/modulesListing?_format=json&language=en&categoryId=86528",
													"protocol": "https",
													"host": [
														"localhost"
													],
													"port": "1082",
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Query String_Format",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
												},
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_formattt123=json&language=en&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_formattt123",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														},
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Blank Format Param",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
												},
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=&language=en&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": ""
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without Format Param",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?language=en&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Blank Language",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&language=&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": ""
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Alphanum in Lang",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&language=en@123&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en@123"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without Language Param",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "",
															"value": "",
															"disabled": true
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Query String Langugage",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&languagee12=en&categoryId=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "languagee12",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Blank CategoryID",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&language=en&categoryId=",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Without CategoryID Param",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListing?_format=json&language=en",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListing"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Query String CategoryID",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListingTest123?_format=json&language=en&categoryIdddss12=86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListingTest123"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryIdddss12",
															"value": "86528"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Alphanum in CategoryId",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}{{hostname}}/api/v1/modulesListingTest123?_format=json&language=en&categoryId=abc@86528",
													"host": [
														"{{protocol}}{{hostname}}"
													],
													"path": [
														"api",
														"v1",
														"modulesListingTest123"
													],
													"query": [
														{
															"key": "_format",
															"value": "json"
														},
														{
															"key": "language",
															"value": "en"
														},
														{
															"key": "categoryId",
															"value": "abc@86528"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Invalid End Point",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevelsTest123?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevelsTest123"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/learningLevels?_format=json&language=en",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_formattt12=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "_formattt12",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=json&language=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String Langugage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=json&languageees1=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageees1",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/learningLevels?_format=json&language=en@#12#12",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"learningLevels"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en@#12"
												}
											],
											"hash": "12#12"
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf4f5666-75b5-4901-9cf9-135bd480b1d4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1657877d-5393-4d23-b2c2-ff9774f7c1c3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "sellingTips Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListingTest123?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListingTest123"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/sellingTipsListing?_format=json&language=en",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_formattt12=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "_formattt12",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_format=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_format=json&language=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String Langugage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/sellingTipsListing?_format=json&languageeess12=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"sellingTipsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageeess12",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&niddddd=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "niddddd",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "insiderCorner Listing",
							"item": [
								{
									"name": "Invalid End Point",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListingTest12345?_format=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListingTest12345"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/insiderCornerListing?_format=json&language=en",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_formattt123=json&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_formattt123",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_format=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?=&language=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_format=json&language=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String Langugage",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/insiderCornerListing?_format=json&languageTest=en",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"insiderCornerListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "languageTest",
													"value": "en"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Language",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/brandStoryDetails?_format=json&language=en&niddddd=1&brandId=14",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"brandStoryDetails"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "niddddd",
													"value": "1"
												},
												{
													"key": "brandId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Comment",
							"item": [
								{
									"name": "Invalid End Point",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commenttttesss?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commenttttesss"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/comment?_format=json",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_formattttt=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank parentId",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum parentId",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"ab@#02\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/comment?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"comment"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "User Activity for Levels",
							"item": [
								{
									"name": "Incorrect End Point",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxLDkwMDFdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTIzNCwzMl19.cZZW32EIYJZT6-2jfq-l3dA0lQ2C2fZRPKFRqgBGRYI",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevellll?_format=json&language=en&categoryId[]=86712",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevellll"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Req Type Change",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?_format=json&language=en&categoryId[]=86712",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect URL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}test/api/v1/userActivitiesLevel?_format=json&language=en&categoryId[]=86712",
											"host": [
												"{{protocol}}test"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank format",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?_format=&language=en&categoryId[]=86712",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?language=en&categoryId[]=86712",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "_format",
													"value": "",
													"disabled": true
												},
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Language",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxLDkwMDFdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTIzNCwzMl19.cZZW32EIYJZT6-2jfq-l3dA0lQ2C2fZRPKFRqgBGRYI",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?language=&categoryId[]=86712&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "language",
													"value": ""
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Language Param",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxLDkwMDFdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTIzNCwzMl19.cZZW32EIYJZT6-2jfq-l3dA0lQ2C2fZRPKFRqgBGRYI",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?categoryId[]=86712&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "language",
													"value": "en",
													"disabled": true
												},
												{
													"key": "categoryId[]",
													"value": "86712"
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank category ID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxLDkwMDFdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTIzNCwzMl19.cZZW32EIYJZT6-2jfq-l3dA0lQ2C2fZRPKFRqgBGRYI",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?language=en&categoryId[]=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Category Id Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?language=en&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "categoryId[]",
													"value": "",
													"disabled": true
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Category ID",
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkthbmlrYSBBcm9yYSIsImlhdCI6MTUxNjIzOTAyMiwidXNlcklkIjoxLCJyZWdpb24iOls4MDAxLDkwMDFdLCJzdWJyZWdpb24iOltdLCJjb3VudHJ5IjpbXSwiYnJhbmRzIjpbMTIzNCwzMl19.cZZW32EIYJZT6-2jfq-l3dA0lQ2C2fZRPKFRqgBGRYI",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/userActivitiesLevel?language=en&_format=json&categoryId[]=86712QWER",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"userActivitiesLevel"
											],
											"query": [
												{
													"key": "language",
													"value": "en"
												},
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "categoryId[]",
													"value": "86712QWER"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "commentsListing",
							"item": [
								{
									"name": "Invalid End Point",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNhbmRlc2giLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MSwicmVnaW9uIjpbODAwMSw5MDAxXSwic3VicmVnaW9uIjpbODIsODMsOTFdLCJjb3VudHJ5IjpbMTEsMTIsMjFdLCJicmFuZHMiOlsxMiwxMywxNF19.X8FTV0NVkBe6yEja7RitJTuOflx5eZ0-5JUmuLzWMzg",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListingTest12345?_format=json&nid=31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListingTest12345"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid",
													"value": "31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Host Name",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "https://localhost:1082/api/v1/commentsListingTest12345?_format=json&nid=31",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1082",
											"path": [
												"api",
												"v1",
												"commentsListingTest12345"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid",
													"value": "31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_formattttt=json&nid=31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_formattttt",
													"value": "json"
												},
												{
													"key": "nid",
													"value": "31"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Format Param",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciBuZXciLCJpYXQiOjE1MTYyMzkwMjIsInVzZXJJZCI6MywicmVnaW9uIjpbODAwMSw5MDAxXX0.FZBv36Lxs9tgiNwJ1PYb-sSaTtSi_KmeUE1n5cC2Wgw"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"nid\": 31,\n  \"parentId\": \"37\",\n  \"comment\": \"This is a new Child comment created by User 3\"\n}\n\n"
										},
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_format=&nid=31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": ""
												},
												{
													"key": "nid",
													"value": "31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Format Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?nid=31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json",
													"disabled": true
												},
												{
													"key": "nid",
													"value": "31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Blank Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?nid=&_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "nid",
													"value": ""
												},
												{
													"key": "_format",
													"value": "json"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Without Nid Param",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_format=json",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Query String_Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_format=json&nidTest=31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nidTest",
													"value": "31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alphanum in Nid",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}{{hostname}}/api/v1/commentsListing?_format=json&nid=ab@#31#31",
											"host": [
												"{{protocol}}{{hostname}}"
											],
											"path": [
												"api",
												"v1",
												"commentsListing"
											],
											"query": [
												{
													"key": "_format",
													"value": "json"
												},
												{
													"key": "nid",
													"value": "ab@#31"
												}
											],
											"hash": "31#31"
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}